plugins {
	id 'com.diffplug.blowdryer'
	id 'com.diffplug.spotless-changelog'
}

spotlessChangelog {
	changelogFile 'CHANGES.md'
}
allprojects {
	apply from: 干.file('base/changelog.gradle')
}
apply from: 干.file('spotless/freshmark.gradle')

subprojects { subProject ->
	apply from: 干.file('base/java8.gradle')
	apply plugin: 'java-library'

	if (subProject.name == 'durian-swt') {
		// configured there
	} else if (subProject.name == 'durian-swt.os') {
		dependencies {
			compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
			testImplementation "junit:junit:$VER_JUNIT"
		}
	} else {
		apply plugin: 'com.diffplug.gradle.eclipse.mavencentral'
		String platformCode = project.name.substring('durian-swt.'.length())
		eclipseMavenCentral {
			release SWT_VERSION, {
				implementation "org.eclipse.swt.$platformCode"
			}
		}
		dependencies {
			api project(':durian-swt')
		}
		configurations.all {
			resolutionStrategy.eachDependency { DependencyResolveDetails details ->
				if (details.requested.name.contains('${osgi.platform}')) {
					details.useTarget('org.eclipse.platform:org.eclipse.swt:' + details.requested.version)
				}
			}
		}
		// the manifest should be a fragment
		def swtPlatform = com.diffplug.common.swt.os.SwtPlatform.parseWsOsArch(platformCode)
		jar.manifest.attributes (
				'Fragment-Host': 'durian-swt',
				'Eclipse-PlatformFilter': swtPlatform.platformFilter(),
				)
	}

	//////////
	// OSGI //
	//////////
	apply plugin: 'com.diffplug.gradle.osgi.bndmanifest'
	osgiBndManifest {
		copyTo 'src/main/resources/META-INF/MANIFEST.MF'
	}
	jar.manifest.attributes (
			'Export-Package': 'com.diffplug.common.swt.*',
			'Bundle-SymbolicName': 'com.diffplug.durian.swt',
			'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
			'Bundle-Vendor': 'DiffPlug',
			'Bundle-DocURL': "https://github.com/${project.org}/${project.name}",
			'Bundle-License': "https://github.com/${project.org}/${project.name}/blob/v${project.version}/LICENSE",
			'-removeheaders': 'Bnd-LastModified,Bundle-Name,Created-By,Tool',
			'-nodefaultversion': 'true'
			)

	///////////
	// MAVEN //
	///////////
	apply plugin: 'maven-publish'
	group='com.diffplug.durian'

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	def verSnapshot = { it.endsWith('-SNAPSHOT') ? 'snapshot' : it }
	// Where it's possible to name parameters and methods clearly enough
	// that javadoc is not necessary, why make the code bigger?
	//
	// Thus, no javadoc warnings.
	def makeLink = { url, text -> "<a href=\"${url}\" style=\"text-transform: none;\">${text}</a>" }
	def javadocInfo = '<h2>' + makeLink("https://github.com/${org}/${name}", "${group}:${name}:${version}") +
			' by ' + makeLink('http://www.diffplug.com', 'DiffPlug') + '</h2>'
	javadoc {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.header javadocInfo
		options.footer javadocInfo
		options.links('https://diffplug.github.io/durian/javadoc/durian-core/' + verSnapshot(VER_DURIAN) + '/')
		options.links('https://diffplug.github.io/durian/javadoc/durian-collect/' + verSnapshot(VER_DURIAN) + '/')
		options.links('https://diffplug.github.io/durian/javadoc/durian-concurrent/' + verSnapshot(VER_DURIAN) + '/')
		options.links('https://diffplug.github.io/durian-debug/javadoc/' + verSnapshot(VER_DURIAN_DEBUG) + '/')
		options.links('https://diffplug.github.io/durian-rx/javadoc/' + verSnapshot(VER_DURIAN_RX) + '/')
		options.links('https://docs.oracle.com/javase/8/docs/api/')
		options.links('http://reactivex.io/RxJava/javadoc/')
		options.links('http://help.eclipse.org/luna/nftopic/org.eclipse.platform.doc.isv/reference/api/')
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
}
