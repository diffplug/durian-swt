apply from: å¹².file('base/kotlin.gradle')

apply plugin: 'dev.equo.p2deps'
p2deps {
	into 'api', {
		p2repo "https://download.eclipse.org/eclipse/updates/$VER_ECLIPSE_PLATFORM/"
		install 'org.eclipse.swt'
		install 'org.eclipse.jface'
		addFilter 'no-platform', {
			it.platformNone()
		}
	}
	if (VER_SWT_EVOLVE.isEmpty()) {
		into 'compileOnly', {
			p2repo "https://download.eclipse.org/eclipse/updates/$VER_ECLIPSE_PLATFORM/"
			install 'org.eclipse.swt'
		}
		into 'testImplementation', {
			p2repo "https://download.eclipse.org/eclipse/updates/$VER_ECLIPSE_PLATFORM/"
			install 'org.eclipse.swt'
			install 'org.eclipse.swt.svg'
		}
	}
}
if (!VER_SWT_EVOLVE.isEmpty()) {
	def swtPlatform = com.diffplug.common.swt.os.SwtPlatform.getRunning()
	String equoOs;
	if ('win32' == swtPlatform.os) {
		equoOs = 'windows'
	} else if ('macosx' == swtPlatform.os) {
		equoOs = 'macos'
	} else if ('linux' == swtPlatform.os) {
		equoOs = 'linux'
	} else {
		throw UnsupportedOperationException("Unknown os in " + swtPlatform)
	}
	String swtEvolve = "dev.equo:swt-evolve:${VER_SWT_EVOLVE}:${equoOs}-${swtPlatform.arch}"
	dependencies {
		compileOnly swtEvolve
		testImplementation swtEvolve
	}
}
dependencies {
	api project(':durian-swt.os')
	api "com.diffplug.durian:durian-rx:$VER_DURIAN_RX"
	implementation "com.diffplug.durian:durian-core:$VER_DURIAN"
	implementation "com.diffplug.durian:durian-collect:$VER_DURIAN"
	implementation "com.diffplug.durian:durian-concurrent:$VER_DURIAN"
	compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
	compileOnly 'com.google.code.findbugs:annotations:3.0.1'
	compileOnly "org.jetbrains:annotations:23.0.0"

	testImplementation "junit:junit:$VER_JUNIT"
	testImplementation "org.assertj:assertj-core:$VER_ASSERTJ"
	testImplementation "com.diffplug.durian:durian-debug:$VER_DURIAN_DEBUG"
}
// in java-library mode, durian-swt.os remains as a folder of classes for gradle internally, which the osgi plugin does not like
tasks.named('jar').configure {
	dependsOn(':durian-swt.os:jar')
}

/////////////////////////
// INTERACTIVE TESTING //
/////////////////////////
// standard `gradlew test` will autoclose after 500ms
boolean isMac = System.getProperty("os.name").toLowerCase().contains("mac")
test {
	systemProperty 'com.diffplug.test.autoclose.milliseconds', '500'
	useJUnit {
		// there are some tests that can't pass without a user, so we'll exclude them
		excludeCategories 'com.diffplug.common.swt.InteractiveTest$FailsWithoutUser'
		// SWT tests don't work in gradle on OS X (https://github.com/ReadyTalk/swt-bling/issues/4)
		if (isMac) {
			jvmArgs = ['-XstartOnFirstThread']
		}
	}
	// log all test events
	testLogging {
		events "failed", "passed", "skipped", "standard_error", "standard_out", "started"
	}
}

// only run the interactive tests
tasks.register('interactiveTest', Test) {
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath
	systemProperty 'com.diffplug.test.autoclose.milliseconds', null
	useJUnit {
		includeCategories 'com.diffplug.common.swt.InteractiveTest'
		if (isMac) {
			jvmArgs = ['-XstartOnFirstThread']
		}
	}
}

tasks.register('runIssue2228', JavaExec) {
	classpath = sourceSets.test.runtimeClasspath
	mainClass = 'com.diffplug.common.swt.Issue_2228'
	if (isMac) {
		jvmArgs = ['-XstartOnFirstThread']
	}
}